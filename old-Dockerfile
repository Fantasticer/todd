# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

FROM ubuntu:14.04
MAINTAINER Matt Oswalt <matt@keepingitclassless.net> (@mierdin)

# RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61
# RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list

# Packaged dependencies
RUN apt-get update && apt-get install -y \
    apparmor \
    aufs-tools \
    automake \
    bash-completion \
    btrfs-tools \
    build-essential \
    createrepo \
    curl \
    dpkg-sig \
    gcc-mingw-w64 \
    git \
    libapparmor-dev \
    libcap-dev \
    parallel \
    reprepro \
    s3cmd=1.1.0* \
    --no-install-recommends

# Get lvm2 source for compiling statically
# RUN git clone -b v2_02_103 https://git.fedorahosted.org/git/lvm2.git /usr/local/lvm2
# see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags

# Compile and install lvm2
#RUN cd /usr/local/lvm2 \
#    && ./configure --enable-static_link \
#    && make device-mapper \
#    && make install_device-mapper
# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
ENV GO_VERSION 1.4.2
RUN curl -ksSL https://golang.org/dl/go${GO_VERSION}.src.tar.gz | tar -v -C /usr/local -xz \
    && mkdir -p /go/bin
ENV PATH /go/bin:/usr/local/go/bin:$PATH
ENV GOPATH /go:/go/src/github.com/mierdin/todd/
RUN cd /usr/local/go/src && ./make.bash --no-clean 2>&1

# Compile Go for cross compilation
ENV DOCKER_CROSSPLATFORMS \
    linux/386 linux/arm \
    darwin/amd64 darwin/386 \
    freebsd/amd64 freebsd/386 freebsd/arm \
    windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
ENV GOARM 5
RUN cd /usr/local/go/src \
    && set -x \
    && for platform in $DOCKER_CROSSPLATFORMS; do \
        GOOS=${platform%/*} \
        GOARCH=${platform##*/} \
            ./make.bash --no-clean 2>&1; \
    done

# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# Update this sha when we upgrade to go 1.5.0
#ENV GO_TOOLS_COMMIT 069d2f3bcb68257b627205f0486d6cc69a231ff9
# Grab Go's cover tool for dead-simple code coverage testing
# Grab Go's vet tool for examining go code to find suspicious constructs
# and help prevent errors that the compiler might not catch
#RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
#    && (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT) \
#    && go install -v golang.org/x/tools/cmd/cover \
#    && go install -v golang.org/x/tools/cmd/vet

# Set user.email so crosbymichael's in-container merge commits go smoothly
# RUN git config --global user.email 'docker-dummy@example.com'

# Add an unprivileged user to be used for tests which need it
# RUN groupadd -r docker
# RUN useradd --create-home --gid docker unprivilegeduser

# VOLUME /var/lib/docker
# WORKDIR /go/src/github.com/docker/docker
# ENV DOCKER_BUILDTAGS apparmor selinux

# Download man page generator
# RUN set -x \
#     && export GOPATH="$(mktemp -d)" \
#     && git clone -b v1.0.1 https://github.com/cpuguy83/go-md2man.git "$GOPATH/src/github.com/cpuguy83/go-md2man" \
#     && git clone -b v1.2 https://github.com/russross/blackfriday.git "$GOPATH/src/github.com/russross/blackfriday" \
#     && go get -v -d github.com/cpuguy83/go-md2man \
#     && go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \
#     && rm -rf "$GOPATH"

# Install godep
RUN go get github.com/tools/godep

# Upload ToDD source
COPY . /src

RUN cd /src && make